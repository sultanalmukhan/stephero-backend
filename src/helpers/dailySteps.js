const db = require('../db');

const GOAL_CONFIG = {
  1: { steps: 5000, bonus: 0.10 },
  2: { steps: 7500, bonus: 0.20 },
  3: { steps: 10000, bonus: 0.30 },
  4: { steps: 12500, bonus: 0.40 }
};

/**
 * ‚úÖ Helper –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –ë–ï–ó timezone –ø—Ä–æ–±–ª–µ–º
 */
function formatDateLocal(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}-${month}-${day}`;
}

/**
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–Ω—å –≤ –±–∞–∑—É (–¥–ª—è –Ω–æ–≤—ã—Ö –¥–Ω–µ–π)
 * –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ credits_earned
 */
async function saveDailyStep(userId, dayData) {
  const { 
    date, 
    steps, 
    goal_level, 
    is_goal_completed, 
    is_streak_completed,
    is_finalized,
    credits_earned = 0  // ‚ú® –î–û–ë–ê–í–ò–õ–ò
  } = dayData;
  
  const stepsGoal = GOAL_CONFIG[goal_level].steps;
  
  try {
    const query = `
      INSERT INTO daily_steps 
        (user_id, date, steps, goal_level, steps_goal, is_goal_completed, is_streak_completed, is_finalized, credits_earned)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
      RETURNING *
    `;
    
    const result = await db.query(query, [
      userId,
      date,
      steps,
      goal_level,
      stepsGoal,
      is_goal_completed,
      is_streak_completed,
      is_finalized,
      credits_earned  // ‚ú® –î–û–ë–ê–í–ò–õ–ò
    ]);
    
    console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –¥–µ–Ω—å: ${date}, steps: ${steps}, finalized: ${is_finalized}, credits: ${credits_earned}`);
    return result.rows[0];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ daily_step:', error);
    throw error;
  }
}

/**
 * ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–µ–Ω—å (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏–ª–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏)
 * –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ credits_earned
 */
async function updateDailyStep(userId, date, updates) {
  const { 
    steps, 
    is_goal_completed, 
    is_streak_completed, 
    is_finalized,
    credits_earned  // ‚ú® –î–û–ë–ê–í–ò–õ–ò
  } = updates;
  
  try {
    const setClauses = [];
    const values = [];
    let paramIndex = 1;

    if (steps !== undefined) {
      setClauses.push(`steps = $${paramIndex}`);
      values.push(steps);
      paramIndex++;
    }

    if (is_goal_completed !== undefined) {
      setClauses.push(`is_goal_completed = $${paramIndex}`);
      values.push(is_goal_completed);
      paramIndex++;
    }

    if (is_streak_completed !== undefined) {
      setClauses.push(`is_streak_completed = $${paramIndex}`);
      values.push(is_streak_completed);
      paramIndex++;
    }

    if (is_finalized !== undefined) {
      setClauses.push(`is_finalized = $${paramIndex}`);
      values.push(is_finalized);
      paramIndex++;
    }

    // ‚ú® –î–û–ë–ê–í–ò–õ–ò
    if (credits_earned !== undefined) {
      setClauses.push(`credits_earned = $${paramIndex}`);
      values.push(credits_earned);
      paramIndex++;
    }

    setClauses.push(`updated_at = NOW()`);
    values.push(userId, date);

    const query = `
      UPDATE daily_steps 
      SET ${setClauses.join(', ')}
      WHERE user_id = $${paramIndex} AND date = $${paramIndex + 1}
      RETURNING *
    `;
    
    const result = await db.query(query, values);
    console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –¥–µ–Ω—å: ${date}, updates:`, updates);
    return result.rows[0];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ daily_step:', error);
    throw error;
  }
}

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥—Å—á–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ streak —Å —É—á–µ—Ç–æ–º Freeze
 * 
 * –õ–û–ì–ò–ö–ê:
 * - –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å (–Ω–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω) –ù–ï –≤—ã–ø–æ–ª–Ω–µ–Ω ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ, —Å—á–∏—Ç–∞–µ–º —Å–æ –≤—á–µ—Ä–∞
 * - –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å (–Ω–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω) –≤—ã–ø–æ–ª–Ω–µ–Ω ‚Üí –≤–∫–ª—é—á–∞–µ–º –µ–≥–æ –≤ streak
 * - Streak —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω (–∏ –Ω–µ—Ç freeze)
 * - –î–µ–Ω—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –µ—Å–ª–∏ is_streak_completed –ò–õ–ò is_freeze_used
 * 
 * –ü–†–ò–ú–ï–†–´:
 * –î–µ–Ω—å 1-10: –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚Üí streak = 10
 * –î–µ–Ω—å 11 (—Å–µ–≥–æ–¥–Ω—è): 1000/5000 —à–∞–≥–æ–≤ ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º streak = 10 (–Ω–µ —Å—á–∏—Ç–∞–µ–º —Å–µ–≥–æ–¥–Ω—è)
 * –î–µ–Ω—å 12 (–Ω–æ–≤—ã–π —Å–µ–≥–æ–¥–Ω—è): –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å 11 —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚Üí streak = 0
 */
async function calculateCurrentStreak(userId) {
  try {
    console.log('\nüîç === calculateCurrentStreak START ===');
    console.log('   User ID:', userId);
    
    const query = `
      SELECT date, steps, steps_goal, is_streak_completed, is_finalized, is_freeze_used
      FROM daily_steps
      WHERE user_id = $1
      ORDER BY date DESC
      LIMIT 365
    `;
    
    const result = await db.query(query, [userId]);
    const days = result.rows;
    
    console.log('   üìä Days found:', days.length);
    
    if (days.length === 0) {
      console.log('   ‚ùå No days found, streak = 0');
      console.log('üîç === calculateCurrentStreak END ===\n');
      return 0;
    }
    
    let todayStr;
    const firstDayDate = new Date(days[0].date);
    const firstDayStr = formatDateLocal(firstDayDate);
    
    if (!days[0].is_finalized) {
      todayStr = firstDayStr;
      console.log('   üìÖ Today (from non-finalized):', todayStr);
    } else {
      const nextDay = new Date(firstDayDate);
      nextDay.setDate(nextDay.getDate() + 1);
      todayStr = formatDateLocal(nextDay);
      console.log('   üìÖ Today (calculated as day after last):', todayStr);
    }
    
    let streak = 0;
    let expectedDate = new Date(firstDayDate);
    expectedDate.setHours(0, 0, 0, 0);
    
    if (firstDayStr !== todayStr) {
      expectedDate.setDate(expectedDate.getDate() - 1);
      console.log('   ‚èÆÔ∏è  Starting from:', formatDateLocal(expectedDate));
    }
    
    for (const day of days) {
      const dayDate = new Date(day.date);
      const dayStr = formatDateLocal(dayDate);
      const expectedStr = formatDateLocal(expectedDate);
      
      console.log(`\n   üìÜ Checking: ${dayStr}`);
      console.log(`      Expected: ${expectedStr}`);
      
      if (dayStr !== expectedStr) {
        console.log('      ‚ùå Day gap detected, breaking streak');
        break;
      }
      
      let isStreakValid = false;
      
      if (day.is_finalized) {
        // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –£—á–∏—Ç—ã–≤–∞–µ–º is_freeze_used
        isStreakValid = day.is_streak_completed || day.is_freeze_used;
        const reason = day.is_freeze_used ? 'freeze used' : 'from flag';
        console.log(`      Finalized: ${isStreakValid ? '‚úÖ' : '‚ùå'} (${reason})`);
      } else {
        const threshold = day.steps_goal * 0.5;
        isStreakValid = day.steps >= threshold;
        console.log(`      Today: ${day.steps} >= ${threshold}? ${isStreakValid ? '‚úÖ' : '‚ùå'}`);
      }
      
      if (isStreakValid) {
        streak++;
        console.log(`      ‚úÖ Streak continues! Count: ${streak}`);
        expectedDate.setDate(expectedDate.getDate() - 1);
      } else {
        // üîß –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
        // –ï—Å–ª–∏ —ç—Ç–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å (–Ω–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω) –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
        if (!day.is_finalized) {
          console.log('      ‚è≠Ô∏è  Today not completed yet, skipping to yesterday');
          expectedDate.setDate(expectedDate.getDate() - 1);
          continue;  // ‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–æ –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
        } else {
          // ‚ùå –§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω - streak –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç—Å—è
          console.log('      ‚ùå Finalized day not completed, breaking streak');
          break;
        }
      }
    }
    
    console.log(`\n   üî• FINAL STREAK: ${streak}`);
    console.log('üîç === calculateCurrentStreak END ===\n');
    return streak;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ current_streak:', error);
    return 0;
  }
}

/**
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥—Å—á–µ—Ç —Å–∞–º–æ–≥–æ –¥–ª–∏–Ω–Ω–æ–≥–æ streak —Å —É—á–µ—Ç–æ–º Freeze
 * 
 * –õ–û–ì–ò–ö–ê:
 * - –°—á–∏—Ç–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π streak —Å—Ä–µ–¥–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–Ω–µ–π
 * - –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å —Ç–µ–∫—É—â–∏–º streak (–º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è)
 * - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º –∏–∑ –¥–≤—É—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 * - –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç: longest_streak >= current_streak
 * - –î–µ–Ω—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –µ—Å–ª–∏ is_streak_completed –ò–õ–ò is_freeze_used
 * 
 * –ü–†–ò–ú–ï–†–´:
 * –§–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–Ω–∏: streak = 15
 * –¢–µ–∫—É—â–∏–π streak: 20 (–≤–∫–ª—é—á–∞—è —Å–µ–≥–æ–¥–Ω—è)
 * ‚Üí longest_streak = 20 ‚úÖ
 */
async function calculateLongestStreak(userId) {
  try {
    console.log('\nüîç === calculateLongestStreak START ===');
    console.log('   User ID:', userId);
    
    const query = `
      SELECT date, is_streak_completed, is_freeze_used
      FROM daily_steps
      WHERE user_id = $1 AND is_finalized = true
      ORDER BY date ASC
    `;
    
    const result = await db.query(query, [userId]);
    const days = result.rows;
    
    console.log('   üìä Finalized days found:', days.length);
    
    if (days.length === 0) {
      console.log('   ‚ùå No finalized days, longest = 0');
      console.log('üîç === calculateLongestStreak END ===\n');
      return 0;
    }
    
    let maxStreak = 0;
    let currentStreak = 0;
    let prevDateStr = null;
    
    for (const day of days) {
      const dayDate = new Date(day.date);
      const currentDateStr = formatDateLocal(dayDate);
      
      if (prevDateStr) {
        const [year, month, dayNum] = prevDateStr.split('-').map(Number);
        const prevDateObj = new Date(year, month - 1, dayNum);
        prevDateObj.setDate(prevDateObj.getDate() + 1);
        const expectedDateStr = formatDateLocal(prevDateObj);
        
        if (currentDateStr !== expectedDateStr) {
          console.log(`   ‚ö†Ô∏è  Gap detected: ${prevDateStr} -> ${currentDateStr}, resetting streak`);
          maxStreak = Math.max(maxStreak, currentStreak);
          currentStreak = 0;
        }
      }
      
      // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –£—á–∏—Ç—ã–≤–∞–µ–º is_freeze_used
      const isStreakValid = day.is_streak_completed || day.is_freeze_used;
      
      if (isStreakValid) {
        currentStreak++;
        const reason = day.is_freeze_used ? '(freeze)' : '';
        console.log(`   ‚úÖ ${currentDateStr}: streak continues (${currentStreak}) ${reason}`);
      } else {
        console.log(`   ‚ùå ${currentDateStr}: streak broken`);
        maxStreak = Math.max(maxStreak, currentStreak);
        currentStreak = 0;
      }
      
      prevDateStr = currentDateStr;
    }
    
    maxStreak = Math.max(maxStreak, currentStreak);
    console.log(`   üèÜ Max streak from finalized days: ${maxStreak}`);
    
    // üîß –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º streak (–º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è)
    const activeStreak = await calculateCurrentStreak(userId);
    console.log(`   üî• Current active streak: ${activeStreak}`);
    
    const finalLongestStreak = Math.max(maxStreak, activeStreak);
    console.log(`\n   üèÜ FINAL LONGEST STREAK: ${finalLongestStreak}`);
    console.log('üîç === calculateLongestStreak END ===\n');
    
    return finalLongestStreak;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ longest_streak:', error);
    return 0;
  }
}

/**
 * üßä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã Freeze –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - –í—ã—á–∏—Å–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥—ã –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 14 –¥–Ω–µ–π)
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Freeze –Ω–∞ –ø—Ä–æ–≤–∞–ª—å–Ω—ã–µ –¥–Ω–∏
 * - –û–±–Ω–æ–≤–ª—è–µ—Ç freeze_count –∏ last_freeze_earned_at
 */
async function processFreezeSystem(userId) {
  try {
    console.log('\nüßä === processFreezeSystem START ===');
    console.log('   User ID:', userId);

    // 1. –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Freeze
    const userResult = await db.query(
      'SELECT freeze_count, last_freeze_earned_at FROM user_progress WHERE user_id = $1',
      [userId]
    );

    if (userResult.rows.length === 0) {
      console.log('   ‚ùå User not found');
      return { freezeCount: 0, freezeUsedDays: [], freezesEarned: 0, freezesUsed: 0 };
    }

    const user = userResult.rows[0];
    let freezeCount = user.freeze_count || 0;
    let lastFreezeEarnedAt = user.last_freeze_earned_at;

    console.log('   Current freeze_count:', freezeCount);
    console.log('   Last freeze earned at:', lastFreezeEarnedAt);

    // 2. –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π sync - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    if (!lastFreezeEarnedAt) {
      console.log('   ‚öôÔ∏è  First sync - initializing freeze system');
      const now = new Date();
      await db.query(
        'UPDATE user_progress SET last_freeze_earned_at = $1 WHERE user_id = $2',
        [now, userId]
      );
      console.log('   ‚úÖ Freeze system initialized');
      console.log('üßä === processFreezeSystem END ===\n');
      return { freezeCount: 0, freezeUsedDays: [], freezesEarned: 0, freezesUsed: 0 };
    }

    // 3. –í—ã—á–∏—Å–ª–∏—Ç—å —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–∏–æ–¥–æ–≤ –ø—Ä–æ—à–ª–æ
    const now = new Date();
    const lastEarned = new Date(lastFreezeEarnedAt);
    const daysSince = Math.floor((now - lastEarned) / (1000 * 60 * 60 * 24));
    const periods = Math.floor(daysSince / 14);

    console.log('   Days since last earned:', daysSince);
    console.log('   Periods to process:', periods);

    if (periods === 0) {
      console.log('   ‚ÑπÔ∏è  No new periods to process');
      console.log('üßä === processFreezeSystem END ===\n');
      return { freezeCount, freezeUsedDays: [], freezesEarned: 0, freezesUsed: 0 };
    }

    // 4. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ –≤—á–µ—Ä–∞
    const startDate = formatDateLocal(lastEarned);
    const yesterday = new Date(now);
    yesterday.setDate(yesterday.getDate() - 1);
    const endDate = formatDateLocal(yesterday);

    console.log('   Processing days from', startDate, 'to', endDate);

    const daysResult = await db.query(
      `SELECT date, steps, steps_goal, is_streak_completed, is_finalized, is_freeze_used
       FROM daily_steps
       WHERE user_id = $1 AND date >= $2 AND date <= $3
       ORDER BY date ASC`,
      [userId, startDate, endDate]
    );

    const days = daysResult.rows;
    console.log('   Days found:', days.length);

    // 5. –°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Freeze
    let tempFreezeCount = freezeCount;
    let periodsProcessed = 0;
    let freezesEarned = 0;
    let freezesUsed = 0;
    const freezeUsedDays = [];

    for (const day of days) {
      const dayDate = new Date(day.date);
      const daysSinceStart = Math.floor((dayDate - lastEarned) / (1000 * 60 * 60 * 24));
      const periodForThisDay = Math.floor(daysSinceStart / 14);

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ –ø–æ—Ä–∞ –ª–∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å Freeze
      if (periodForThisDay > periodsProcessed && periodsProcessed < periods) {
        if (tempFreezeCount < 4) {
          tempFreezeCount++;
          freezesEarned++;
          console.log(`   üéÅ Freeze earned on period ${periodForThisDay + 1} (count: ${tempFreezeCount})`);
        } else {
          console.log(`   ‚ö†Ô∏è  Freeze limit reached (4), cannot earn more`);
        }
        periodsProcessed = periodForThisDay;
      }

      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Freeze
      const dayStr = formatDateLocal(dayDate);
      if (!day.is_streak_completed && day.is_finalized && !day.is_freeze_used) {
        if (tempFreezeCount > 0) {
          tempFreezeCount--;
          freezesUsed++;
          await db.query(
            'UPDATE daily_steps SET is_freeze_used = true WHERE user_id = $1 AND date = $2',
            [userId, day.date]
          );
          freezeUsedDays.push(dayStr);
          console.log(`   ‚ùÑÔ∏è  Freeze used on ${dayStr} (remaining: ${tempFreezeCount})`);
        } else {
          console.log(`   ‚ùå No Freeze available for ${dayStr}, streak broken`);
        }
      }
    }

    // 6. –û–±–Ω–æ–≤–∏—Ç—å last_freeze_earned_at –∏ freeze_count
    const newLastFreezeEarnedAt = new Date(lastEarned);
    newLastFreezeEarnedAt.setDate(newLastFreezeEarnedAt.getDate() + (periods * 14));

    await db.query(
      `UPDATE user_progress 
       SET freeze_count = $1, 
           last_freeze_earned_at = $2,
           total_freezes_earned = total_freezes_earned + $3,
           total_freezes_used = total_freezes_used + $4
       WHERE user_id = $5`,
      [tempFreezeCount, newLastFreezeEarnedAt, freezesEarned, freezesUsed, userId]
    );

    console.log('   ‚úÖ Final freeze_count:', tempFreezeCount);
    console.log('   ‚úÖ Freezes earned this sync:', freezesEarned);
    console.log('   ‚úÖ Freezes used this sync:', freezesUsed);
    console.log('   ‚úÖ New last_freeze_earned_at:', formatDateLocal(newLastFreezeEarnedAt));
    console.log('üßä === processFreezeSystem END ===\n');

    return {
      freezeCount: tempFreezeCount,
      freezeUsedDays,
      freezesEarned,
      freezesUsed
    };

  } catch (error) {
    console.error('‚ùå Error in processFreezeSystem:', error);
    return { freezeCount: 0, freezeUsedDays: [], freezesEarned: 0, freezesUsed: 0 };
  }
}

module.exports = {
  saveDailyStep,
  updateDailyStep,
  calculateCurrentStreak,
  calculateLongestStreak,
  processFreezeSystem,
  GOAL_CONFIG
};
