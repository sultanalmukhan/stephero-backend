const db = require('../db');
const { getCharactersList, LEVEL_XP_REQUIREMENTS } = require('../config/characters');

/**
 * GET /api/characters
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getCharacters(req, res) {
  try {
    const { user_id } = req.query;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!user_id) {
      return res.status(400).json({ 
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä user_id' 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await db.query(
      'SELECT total_xp, current_level FROM user_progress WHERE user_id = $1',
      [user_id]
    );

    let userLevel = 1;
    let userTotalXP = 0;

    if (userResult.rows.length > 0) {
      const user = userResult.rows[0];
      userTotalXP = parseFloat(user.total_xp) || 0;
      
      // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –Ω–∞ –æ—Å–Ω–æ–≤–µ total_xp
      for (let i = 10; i >= 1; i--) {
        if (userTotalXP >= LEVEL_XP_REQUIREMENTS[i]) {
          userLevel = i;
          break;
        }
      }
    } else {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
      await db.query('INSERT INTO users (id) VALUES ($1) ON CONFLICT (id) DO NOTHING', [user_id]);
      await db.query(
        'INSERT INTO user_progress (user_id, goal_level) VALUES ($1, $2) ON CONFLICT (user_id) DO NOTHING',
        [user_id, 3]
      );
      console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π:', user_id);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    const characters = getCharactersList(userLevel, userTotalXP);

    console.log(`üéÆ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user_id}:`);
    console.log(`   –£—Ä–æ–≤–µ–Ω—å: ${userLevel}`);
    console.log(`   Total XP: ${userTotalXP}`);
    console.log(`   –û—Ç–∫—Ä—ã—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π: ${userLevel}/10`);

    res.json(characters);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ getCharacters:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message 
    });
  }
}

module.exports = { getCharacters };
