const db = require('../db');
const { getCharacterData } = require('../config/characters');
const { 
  saveDailyStep,
  updateDailyStep,
  calculateCurrentStreak, 
  calculateLongestStreak,
  processFreezeSystem,
  GOAL_CONFIG 
} = require('../helpers/dailySteps');

// üîí –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è subscription cap
const FREE_TIER_MAX_LEVEL = 3;
const FREE_TIER_MAX_XP = 5999.9; // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è —É—Ä–æ–≤–Ω—è 3

async function syncSteps(req, res) {
  try {
    const { 
      user_id, 
      current_goal_level,
      completed_days,
      has_subscription = false  // üîí –î–û–ë–ê–í–ò–õ–ò: –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!user_id || !current_goal_level || !completed_days || completed_days.length === 0) {
      return res.status(400).json({ 
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
        required: ['user_id', 'current_goal_level', 'completed_days']
      });
    }

    // –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await ensureUserExists(user_id);

    // üîí –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î
    await updateSubscriptionStatus(user_id, has_subscription);

    // üßä –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Å—Ç–µ–º—É Freeze –ü–ï–†–ï–î –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–Ω–µ–π
    const freezeResult = await processFreezeSystem(user_id);

    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const previousProgress = await getCurrentProgress(user_id);
    const previousXP = previousProgress.current_xp;
    const previousCredits = previousProgress.total_credits || 0;

    // –û–±–Ω–æ–≤–∏—Ç—å goal_level –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
    await updateGoalLevel(user_id, current_goal_level);

    // –†–∞–∑–¥–µ–ª—è–µ–º –º–∞—Å—Å–∏–≤: –ø–æ—Å–ª–µ–¥–Ω–∏–π = —Å–µ–≥–æ–¥–Ω—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ = previousDays
    const today = completed_days[completed_days.length - 1];
    const previousDays = completed_days.slice(0, -1);

    console.log(`üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è ${user_id}:`);
    console.log(`   –ü–æ–¥–ø–∏—Å–∫–∞: ${has_subscription ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' : '‚ùå –ù–µ—Ç'}`);  // üîí –î–û–ë–ê–í–ò–õ–ò
    console.log(`   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π: ${previousDays.length}`);
    console.log(`   –°–µ–≥–æ–¥–Ω—è: ${today.date} (${today.steps} —à–∞–≥–æ–≤)`);

    let totalXPGained = 0;
    let bonusXPEarned = 0;
    let totalCreditsEarned = 0;
    let totalXPLost = 0;  // üîí –î–û–ë–ê–í–ò–õ–ò: —Ç—Ä–µ–∫–∏–Ω–≥ –ø–æ—Ç–µ—Ä—è–Ω–Ω–æ–≥–æ XP
    const bonusDetails = [];

    // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π (–≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
    for (const day of previousDays) {
      // üîí –û–ë–ù–û–í–ò–õ–ò: –ø–µ—Ä–µ–¥–∞–µ–º has_subscription –∏ previousProgress
      const result = await processPreviousDay(
        user_id, 
        day, 
        previousProgress.current_level,
        has_subscription,
        previousProgress  // –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ XP
      );
      
      totalXPGained += result.xpGained;
      bonusXPEarned += result.bonusXP;
      totalCreditsEarned += result.creditsEarned;
      totalXPLost += result.xpLost;  // üîí –î–û–ë–ê–í–ò–õ–ò
      
      if (result.bonusXP > 0 || !result.goalReached) {
        bonusDetails.push({
          date: day.date,
          steps: day.steps,
          goal: result.stepsGoal,
          bonus: result.bonusXP,
          goal_reached: result.goalReached
        });
      }
    }

    // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    // üîí –û–ë–ù–û–í–ò–õ–ò: –ø–µ—Ä–µ–¥–∞–µ–º has_subscription –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    const currentProgressAfterPrevious = await getCurrentProgress(user_id);
    const todayResult = await processTodayDay(
      user_id, 
      today, 
      has_subscription, 
      currentProgressAfterPrevious
    );
    totalXPGained += todayResult.xpGained;
    totalXPLost += todayResult.xpLost;  // üîí –î–û–ë–ê–í–ò–õ–ò

    // 3. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = await getFinalProgress(user_id);
    
    // 4. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ
    const todayGoal = GOAL_CONFIG[today.goal_level].steps;
    const todayPercentage = Math.floor((today.steps / todayGoal) * 100);
    const todayGoalReached = today.steps >= todayGoal;
    const isStreakCompletedToday = today.steps >= (todayGoal * 0.5);

    // üßä –í—ã—á–∏—Å–ª–∏—Ç—å –¥–Ω–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ Freeze
    const userProgressResult = await db.query(
      'SELECT last_freeze_earned_at FROM user_progress WHERE user_id = $1',
      [user_id]
    );
    
    let daysUntilNextFreeze = 14;
    if (userProgressResult.rows.length > 0 && userProgressResult.rows[0].last_freeze_earned_at) {
      const lastEarned = new Date(userProgressResult.rows[0].last_freeze_earned_at);
      const now = new Date();
      const daysSince = Math.floor((now - lastEarned) / (1000 * 60 * 60 * 24));
      daysUntilNextFreeze = Math.max(0, 14 - (daysSince % 14));
    }

    // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ level cap
    const isLevelCapped = !has_subscription && result.current_level >= FREE_TIER_MAX_LEVEL;

    res.json({
      ...result,
      
      // –û–±—â–µ–µ
      previous_xp: previousXP,
      xp_gained: totalXPGained,
      
      // –ë–æ–Ω—É—Å—ã –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–µ –¥–Ω–∏
      bonus_xp_earned: bonusXPEarned,
      bonus_details: bonusDetails,
      
      // Credits
      previous_credits: previousCredits,
      credits_earned: totalCreditsEarned,
      
      // –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
      today_steps: today.steps,
      today_goal: todayGoal,
      today_goal_percentage: todayPercentage,
      today_goal_reached: todayGoalReached,
      is_streak_completed_today: isStreakCompletedToday,

      // üßä Freeze status
      freeze_status: {
        current_freeze_count: freezeResult.freezeCount,
        max_freeze_count: 4,
        days_until_next_freeze: daysUntilNextFreeze,
        freezes_earned_this_sync: freezeResult.freezesEarned,
        freezes_used_this_sync: freezeResult.freezesUsed,
        freeze_used_on_dates: freezeResult.freezeUsedDays
      },

      // üîí –î–û–ë–ê–í–ò–õ–ò: Subscription status
      subscription_status: {
        has_subscription: has_subscription,
        is_level_capped: isLevelCapped,
        max_free_level: FREE_TIER_MAX_LEVEL,
        xp_lost_this_sync: parseFloat(totalXPLost.toFixed(1))
      }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ syncSteps:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message 
    });
  }
}

/**
 * üîí –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
 */
async function updateSubscriptionStatus(userId, hasSubscription) {
  await db.query(
    'UPDATE user_progress SET has_subscription = $1 WHERE user_id = $2',
    [hasSubscription, userId]
  );
  console.log(`üîí Subscription status updated: ${hasSubscription}`);
}

/**
 * üîí –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –¥–Ω—è —Å —É—á–µ—Ç–æ–º subscription cap
 */
async function processPreviousDay(userId, day, currentLevel, hasSubscription, currentProgress) {
  const { date, steps, goal_level } = day;
  
  if (!GOAL_CONFIG[goal_level]) {
    console.warn(`–ù–µ–≤–µ—Ä–Ω—ã–π goal_level: ${goal_level} –¥–ª—è –¥–Ω—è ${date}`);
    return { xpGained: 0, bonusXP: 0, creditsEarned: 0, xpLost: 0, goalReached: false, stepsGoal: 0 };
  }

  const stepsGoal = GOAL_CONFIG[goal_level].steps;
  const bonusPercent = GOAL_CONFIG[goal_level].bonus;
  const isGoalCompleted = steps >= stepsGoal;
  const isStreakCompleted = steps >= (stepsGoal * 0.5);

  // üîí Credits –∏ –±–æ–Ω—É—Å—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–ª–∏ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ cap
  let creditsEarned = 0;
  let canEarnBonus = hasSubscription;
  
  if (isGoalCompleted && canEarnBonus) {
    creditsEarned = (currentLevel * 10) + ((goal_level - 1) * 2);
    console.log(`üí∞ Credits calculated: level=${currentLevel}, goal_level=${goal_level} ‚Üí ${creditsEarned} credits`);
  }

  const existingDay = await db.query(
    'SELECT steps, is_finalized FROM daily_steps WHERE user_id = $1 AND date = $2',
    [userId, date]
  );

  let xpGained = 0;
  let bonusXP = 0;
  let xpLost = 0;  // üîí –î–û–ë–ê–í–ò–õ–ò

  if (existingDay.rows.length === 0) {
    // –î–µ–Ω—å –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î ‚Üí –Ω–æ–≤—ã–π –¥–µ–Ω—å
    console.log(`üìÖ –ù–æ–≤—ã–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–µ–Ω—å: ${date}`);
    
    let xpAmount = steps * 0.1;

    // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ cap –¥–ª—è free users
    if (!hasSubscription) {
      const currentTotalXP = parseFloat(currentProgress.total_xp) || 0;
      const accumulated = getAccumulatedXP(currentProgress.current_level);
      const actualTotalXP = accumulated + currentTotalXP;

      if (actualTotalXP >= FREE_TIER_MAX_XP) {
        // –£–∂–µ –Ω–∞ –ª–∏–º–∏—Ç–µ - –≤–µ—Å—å XP —Ç–µ—Ä—è–µ—Ç—Å—è
        xpLost = xpAmount;
        xpAmount = 0;
        console.log(`üîí Level cap reached: ${xpAmount} XP lost`);
      } else if (actualTotalXP + xpAmount > FREE_TIER_MAX_XP) {
        // –ß–∞—Å—Ç–∏—á–Ω–æ –º–æ–∂–Ω–æ –Ω–∞—á–∏—Å–ª–∏—Ç—å
        const allowedXP = FREE_TIER_MAX_XP - actualTotalXP;
        xpLost = xpAmount - allowedXP;
        xpAmount = allowedXP;
        console.log(`üîí Partial XP cap: earned ${xpAmount}, lost ${xpLost}`);
      }
    }

    if (xpAmount > 0) {
      await db.query(
        'UPDATE user_progress SET total_xp = total_xp + $1, total_steps = total_steps + $2, total_credits = total_credits + $3, total_credits_earned = total_credits_earned + $3 WHERE user_id = $4',
        [xpAmount, steps, creditsEarned, userId]
      );
      xpGained = xpAmount;
    }

    // üîí –ë–æ–Ω—É—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    if (isGoalCompleted && canEarnBonus) {
      bonusXP = parseFloat((steps * bonusPercent * 0.1).toFixed(1));
      
      // –ë–æ–Ω—É—Å —Ç–æ–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ cap
      let bonusToApply = bonusXP;
      if (!hasSubscription) {
        const currentTotalXP = parseFloat(currentProgress.total_xp) || 0;
        const accumulated = getAccumulatedXP(currentProgress.current_level);
        const actualTotalXP = accumulated + currentTotalXP + xpGained;

        if (actualTotalXP >= FREE_TIER_MAX_XP) {
          xpLost += bonusXP;
          bonusToApply = 0;
        } else if (actualTotalXP + bonusXP > FREE_TIER_MAX_XP) {
          const allowedBonus = FREE_TIER_MAX_XP - actualTotalXP;
          xpLost += (bonusXP - allowedBonus);
          bonusToApply = allowedBonus;
        }
      }

      if (bonusToApply > 0) {
        await db.query(
          'UPDATE user_progress SET total_xp = total_xp + $1 WHERE user_id = $2',
          [bonusToApply, userId]
        );
        bonusXP = bonusToApply;
        console.log(`‚úÖ –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω –∑–∞ ${date}: ${bonusXP} XP`);
      }
      
      if (creditsEarned > 0) {
        console.log(`üí∞ Credits –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∑–∞ ${date}: ${creditsEarned} credits`);
      }
    } else if (isGoalCompleted && !canEarnBonus) {
      console.log(`üîí –î–µ–Ω—å ${date}: —Ü–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –±–æ–Ω—É—Å –∏ credits –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏)`);
    } else {
      console.log(`‚ÑπÔ∏è –î–µ–Ω—å ${date}: —Ü–µ–ª—å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –±–æ–Ω—É—Å –∏ credits –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã`);
    }

    await saveDailyStep(userId, {
      date,
      steps,
      goal_level,
      is_goal_completed: isGoalCompleted,
      is_streak_completed: isStreakCompleted,
      is_finalized: true,
      credits_earned: creditsEarned
    });

  } else {
    // –î–µ–Ω—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è
    const oldSteps = existingDay.rows[0].steps;
    const isFinalized = existingDay.rows[0].is_finalized;

    if (isFinalized) {
      console.log(`‚ÑπÔ∏è –î–µ–Ω—å ${date} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ (–¥—É–±–ª–∏–∫–∞—Ç)`);
      return { xpGained: 0, bonusXP: 0, creditsEarned: 0, xpLost: 0, goalReached: isGoalCompleted, stepsGoal };
    }

    console.log(`üìÖ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–Ω—è: ${date} (–±—ã–ª–æ ${oldSteps} —à–∞–≥–æ–≤, —Å—Ç–∞–ª–æ ${steps} —à–∞–≥–æ–≤)`);
    
    const difference = steps - oldSteps;
    
    if (difference > 0) {
      let xpAmount = difference * 0.1;

      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ cap
      if (!hasSubscription) {
        const currentTotalXP = parseFloat(currentProgress.total_xp) || 0;
        const accumulated = getAccumulatedXP(currentProgress.current_level);
        const actualTotalXP = accumulated + currentTotalXP;

        if (actualTotalXP >= FREE_TIER_MAX_XP) {
          xpLost = xpAmount;
          xpAmount = 0;
        } else if (actualTotalXP + xpAmount > FREE_TIER_MAX_XP) {
          const allowedXP = FREE_TIER_MAX_XP - actualTotalXP;
          xpLost = xpAmount - allowedXP;
          xpAmount = allowedXP;
        }
      }

      if (xpAmount > 0) {
        await db.query(
          'UPDATE user_progress SET total_xp = total_xp + $1, total_steps = total_steps + $2, total_credits = total_credits + $3, total_credits_earned = total_credits_earned + $3 WHERE user_id = $4',
          [xpAmount, difference, creditsEarned, userId]
        );
        xpGained = xpAmount;
        console.log(`‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω XP –∑–∞ —Ä–∞–∑–Ω–∏—Ü—É: ${xpAmount} (${difference} —à–∞–≥–æ–≤)`);
      }
    } else if (difference < 0) {
      console.warn(`‚ö†Ô∏è –®–∞–≥–∏ —É–º–µ–Ω—å—à–∏–ª–∏—Å—å –¥–ª—è ${date}: ${oldSteps} ‚Üí ${steps}`);
    }

    // üîí –ë–æ–Ω—É—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    if (isGoalCompleted && canEarnBonus) {
      bonusXP = parseFloat((steps * bonusPercent * 0.1).toFixed(1));
      
      let bonusToApply = bonusXP;
      if (!hasSubscription) {
        const currentTotalXP = parseFloat(currentProgress.total_xp) || 0;
        const accumulated = getAccumulatedXP(currentProgress.current_level);
        const actualTotalXP = accumulated + currentTotalXP + xpGained;

        if (actualTotalXP >= FREE_TIER_MAX_XP) {
          xpLost += bonusXP;
          bonusToApply = 0;
        } else if (actualTotalXP + bonusXP > FREE_TIER_MAX_XP) {
          const allowedBonus = FREE_TIER_MAX_XP - actualTotalXP;
          xpLost += (bonusXP - allowedBonus);
          bonusToApply = allowedBonus;
        }
      }

      if (bonusToApply > 0) {
        await db.query(
          'UPDATE user_progress SET total_xp = total_xp + $1 WHERE user_id = $2',
          [bonusToApply, userId]
        );
        bonusXP = bonusToApply;
        console.log(`‚úÖ –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω –∑–∞ ${date}: ${bonusXP} XP`);
      }
      
      if (creditsEarned > 0) {
        console.log(`üí∞ Credits –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∑–∞ ${date}: ${creditsEarned} credits`);
      }
    } else if (isGoalCompleted && !canEarnBonus) {
      console.log(`üîí –î–µ–Ω—å ${date}: —Ü–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–æ –±–æ–Ω—É—Å –∏ credits –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏)`);
    } else {
      console.log(`‚ÑπÔ∏è –î–µ–Ω—å ${date}: —Ü–µ–ª—å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –±–æ–Ω—É—Å –∏ credits –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω—ã`);
    }

    await updateDailyStep(userId, date, {
      steps,
      is_goal_completed: isGoalCompleted,
      is_streak_completed: isStreakCompleted,
      is_finalized: true,
      credits_earned: creditsEarned
    });
  }

  return { xpGained, bonusXP, creditsEarned, xpLost, goalReached: isGoalCompleted, stepsGoal };
}

/**
 * üîí –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è —Å —É—á–µ—Ç–æ–º subscription cap
 */
async function processTodayDay(userId, day, hasSubscription, currentProgress) {
  const { date, steps, goal_level } = day;
  
  if (!GOAL_CONFIG[goal_level]) {
    console.warn(`–ù–µ–≤–µ—Ä–Ω—ã–π goal_level: ${goal_level} –¥–ª—è –¥–Ω—è ${date}`);
    return { xpGained: 0, xpLost: 0 };
  }

  const stepsGoal = GOAL_CONFIG[goal_level].steps;
  const isGoalCompleted = steps >= stepsGoal;
  const isStreakCompleted = steps >= (stepsGoal * 0.5);

  const existingDay = await db.query(
    'SELECT steps FROM daily_steps WHERE user_id = $1 AND date = $2',
    [userId, date]
  );

  let xpGained = 0;
  let xpLost = 0;  // üîí –î–û–ë–ê–í–ò–õ–ò

  if (existingDay.rows.length === 0) {
    console.log(`üìÖ –ü–µ—Ä–≤—ã–π –∑–∞—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: ${date}, —à–∞–≥–æ–≤: ${steps}`);
    
    let xpAmount = steps * 0.1;

    // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ cap
    if (!hasSubscription) {
      const currentTotalXP = parseFloat(currentProgress.total_xp) || 0;
      const accumulated = getAccumulatedXP(currentProgress.current_level);
      const actualTotalXP = accumulated + currentTotalXP;

      if (actualTotalXP >= FREE_TIER_MAX_XP) {
        xpLost = xpAmount;
        xpAmount = 0;
        console.log(`üîí Level cap reached for today: ${xpLost} XP lost`);
      } else if (actualTotalXP + xpAmount > FREE_TIER_MAX_XP) {
        const allowedXP = FREE_TIER_MAX_XP - actualTotalXP;
        xpLost = xpAmount - allowedXP;
        xpAmount = allowedXP;
        console.log(`üîí Partial XP cap for today: earned ${xpAmount}, lost ${xpLost}`);
      }
    }

    if (xpAmount > 0) {
      await db.query(
        'UPDATE user_progress SET total_xp = total_xp + $1, total_steps = total_steps + $2 WHERE user_id = $3',
        [xpAmount, steps, userId]
      );
      xpGained = xpAmount;
    }

    await saveDailyStep(userId, {
      date,
      steps,
      goal_level,
      is_goal_completed: isGoalCompleted,
      is_streak_completed: isStreakCompleted,
      is_finalized: false
    });

  } else {
    const oldSteps = existingDay.rows[0].steps;
    const difference = steps - oldSteps;

    if (difference < 0) {
      console.warn(`‚ö†Ô∏è –®–∞–≥–∏ —É–º–µ–Ω—å—à–∏–ª–∏—Å—å –¥–ª—è ${date}: ${oldSteps} ‚Üí ${steps}`);
      return { xpGained: 0, xpLost: 0 };
    }

    console.log(`üìÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: ${date}, –±—ã–ª–æ ${oldSteps}, —Å—Ç–∞–ª–æ ${steps}, —Ä–∞–∑–Ω–∏—Ü–∞ ${difference}`);

    if (difference > 0) {
      let xpAmount = difference * 0.1;

      // üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ cap
      if (!hasSubscription) {
        const currentTotalXP = parseFloat(currentProgress.total_xp) || 0;
        const accumulated = getAccumulatedXP(currentProgress.current_level);
        const actualTotalXP = accumulated + currentTotalXP;

        if (actualTotalXP >= FREE_TIER_MAX_XP) {
          xpLost = xpAmount;
          xpAmount = 0;
        } else if (actualTotalXP + xpAmount > FREE_TIER_MAX_XP) {
          const allowedXP = FREE_TIER_MAX_XP - actualTotalXP;
          xpLost = xpAmount - allowedXP;
          xpAmount = allowedXP;
        }
      }

      if (xpAmount > 0) {
        await db.query(
          'UPDATE user_progress SET total_xp = total_xp + $1, total_steps = total_steps + $2 WHERE user_id = $3',
          [xpAmount, difference, userId]
        );
        xpGained = xpAmount;
      }
    }

    await updateDailyStep(userId, date, {
      steps,
      is_goal_completed: isGoalCompleted,
      is_streak_completed: isStreakCompleted,
      is_finalized: false
    });
  }

  return { xpGained, xpLost };
}

/**
 * üîí –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í—ã—á–∏—Å–ª–∏—Ç—å accumulated XP –¥–ª—è —É—Ä–æ–≤–Ω—è
 */
function getAccumulatedXP(level) {
  let accumulated = 0;
  for (let i = 1; i < level; i++) {
    accumulated += i * 1000;
  }
  return accumulated;
}

async function updateGoalLevel(userId, goalLevel) {
  if (goalLevel < 1 || goalLevel > 4) {
    throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π goal_level: ${goalLevel}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1-4`);
  }

  await db.query(
    'UPDATE user_progress SET goal_level = $1 WHERE user_id = $2',
    [goalLevel, userId]
  );
}

async function getFinalProgress(userId) {
  const result = await db.query(
    'SELECT total_steps, total_xp, current_level, total_credits FROM user_progress WHERE user_id = $1',
    [userId]
  );

  if (result.rows.length === 0) {
    const characterData = getCharacterData(1);
    return {
      total_steps: 0,
      current_xp: 0,
      current_level: 1,
      xp_to_next_level: 1000,
      total_xp: 0,  // üîí –î–û–ë–ê–í–ò–õ–ò –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
      total_credits: 0,
      character_image_url: characterData.image_url,
      character_animation_url: characterData.animation_url,
      current_streak: 0,
      longest_streak: 0
    };
  }

  const user = result.rows[0];
  const totalXP = parseFloat(user.total_xp);
  
  let level = 1;
  let accumulated = 0;
  
  while (accumulated + (level * 1000) <= totalXP) {
    accumulated += level * 1000;
    level++;
  }

  const currentXP = parseFloat((totalXP - accumulated).toFixed(1));
  const xpToNext = level * 1000;

  const characterData = getCharacterData(level);

  const currentStreak = await calculateCurrentStreak(userId);
  const longestStreak = await calculateLongestStreak(userId);

  return {
    total_steps: parseInt(user.total_steps),
    current_xp: currentXP,
    current_level: level,
    xp_to_next_level: xpToNext,
    total_xp: totalXP,  // üîí –î–û–ë–ê–í–ò–õ–ò –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    total_credits: parseInt(user.total_credits) || 0,
    character_image_url: characterData.image_url,
    character_animation_url: characterData.animation_url,
    current_streak: currentStreak,
    longest_streak: longestStreak
  };
}

async function getCurrentProgress(userId) {
  return await getFinalProgress(userId);
}

async function ensureUserExists(userId) {
  const userCheck = await db.query(
    'SELECT id FROM users WHERE id = $1',
    [userId]
  );

  if (userCheck.rows.length === 0) {
    await db.query('INSERT INTO users (id) VALUES ($1)', [userId]);
    await db.query(
      'INSERT INTO user_progress (user_id, goal_level) VALUES ($1, $2)',
      [userId, 3]
    );
    console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', userId);
  }
}

module.exports = { syncSteps };
