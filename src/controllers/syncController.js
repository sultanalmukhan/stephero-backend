const db = require('../db');
const { getCharacterData } = require('../config/characters');
const { 
  saveDailyStep,
  updateDailyStep,
  calculateCurrentStreak, 
  calculateLongestStreak,
  GOAL_CONFIG 
} = require('../helpers/dailySteps');

async function syncSteps(req, res) {
  try {
    const { 
      user_id, 
      current_goal_level,
      completed_days,
    } = req.body;

    // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!user_id || !current_goal_level || !completed_days) {
      return res.status(400).json({ 
        error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
        required: ['user_id', 'current_goal_level', 'completed_days']
      });
    }

    // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è UUID
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    if (!uuidRegex.test(user_id)) {
      return res.status(400).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id. –û–∂–∏–¥–∞–µ—Ç—Å—è UUID' 
      });
    }

    // 3. –í–∞–ª–∏–¥–∞—Ü–∏—è goal_level
    if (!GOAL_CONFIG[current_goal_level]) {
      return res.status(400).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π goal_level. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1, 2, 3, 4' 
      });
    }

    // 4. –í–∞–ª–∏–¥–∞—Ü–∏—è completed_days
    if (!Array.isArray(completed_days) || completed_days.length === 0) {
      return res.status(400).json({ 
        error: 'completed_days –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º' 
      });
    }

    // 5. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    for (let i = 0; i < completed_days.length; i++) {
      const day = completed_days[i];
      
      if (!day.date || day.steps === undefined || !day.goal_level) {
        return res.status(400).json({ 
          error: `completed_days[${i}]: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (date, steps, goal_level)` 
        });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
      if (!/^\d{4}-\d{2}-\d{2}$/.test(day.date)) {
        return res.status(400).json({ 
          error: `completed_days[${i}]: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã "${day.date}". –û–∂–∏–¥–∞–µ—Ç—Å—è: yyyy-MM-dd` 
        });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤
      if (typeof day.steps !== 'number' || day.steps < 0) {
        return res.status(400).json({ 
          error: `completed_days[${i}]: steps –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º` 
        });
      }

      if (!GOAL_CONFIG[day.goal_level]) {
        return res.status(400).json({ 
          error: `completed_days[${i}]: –Ω–µ–≤–µ—Ä–Ω—ã–π goal_level "${day.goal_level}"` 
        });
      }
    }

    // –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await ensureUserExists(user_id);

    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const previousProgress = await getCurrentProgress(user_id);
    const previousXP = previousProgress.current_xp;

    // –û–±–Ω–æ–≤–∏—Ç—å goal_level –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
    await updateGoalLevel(user_id, current_goal_level);

    // –†–∞–∑–¥–µ–ª—è–µ–º –º–∞—Å—Å–∏–≤: –ø–æ—Å–ª–µ–¥–Ω–∏–π = —Å–µ–≥–æ–¥–Ω—è, –æ—Å—Ç–∞–ª—å–Ω—ã–µ = previousDays
    const today = completed_days[completed_days.length - 1];
    const previousDays = completed_days.slice(0, -1);

    let totalXPGained = 0;
    let bonusXPEarned = 0;
    const bonusDetails = [];

    // 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π (–≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
    for (const day of previousDays) {
      const result = await processPreviousDay(user_id, day);
      totalXPGained += result.xpGained;
      bonusXPEarned += result.bonusXP;
      
      if (result.bonusXP > 0 || !result.goalReached) {
        bonusDetails.push({
          date: day.date,
          steps: day.steps,
          goal: result.stepsGoal,
          bonus: result.bonusXP,
          goal_reached: result.goalReached
        });
      }
    }

    // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
    const todayResult = await processTodayDay(user_id, today);
    totalXPGained += todayResult.xpGained;

    // 3. –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = await getFinalProgress(user_id);
    
    // 4. –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ
    const todayGoal = GOAL_CONFIG[today.goal_level].steps;
    const todayPercentage = Math.floor((today.steps / todayGoal) * 100);
    const todayGoalReached = today.steps >= todayGoal;
    const isStreakCompletedToday = today.steps >= (todayGoal * 0.5);

    res.json({
      ...result,
      
      // –û–±—â–µ–µ
      previous_xp: previousXP,
      xp_gained: totalXPGained,
      
      // –ë–æ–Ω—É—Å—ã –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–µ –¥–Ω–∏
      bonus_xp_earned: bonusXPEarned,
      bonus_details: bonusDetails,
      
      // –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
      today_steps: today.steps,
      today_goal: todayGoal,
      today_goal_percentage: todayPercentage,
      today_goal_reached: todayGoalReached,
      is_streak_completed_today: isStreakCompletedToday
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ syncSteps:', error);
    res.status(500).json({ 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      message: error.message 
    });
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –¥–Ω—è (–Ω–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π)
 * - –ù–∞—á–∏—Å–ª—è–µ–º XP (–µ—Å–ª–∏ –¥–µ–Ω—å –Ω–æ–≤—ã–π)
 * - –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å (–µ—Å–ª–∏ —Ü–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)
 * - –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ–Ω—å (is_finalized = true)
 */
async function processPreviousDay(userId, day) {
  const { date, steps, goal_level } = day;
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è goal_level
  if (!GOAL_CONFIG[goal_level]) {
    console.warn(`–ù–µ–≤–µ—Ä–Ω—ã–π goal_level: ${goal_level} –¥–ª—è –¥–Ω—è ${date}`);
    return { xpGained: 0, bonusXP: 0, goalReached: false, stepsGoal: 0 };
  }

  const stepsGoal = GOAL_CONFIG[goal_level].steps;
  const bonusPercent = GOAL_CONFIG[goal_level].bonus;
  const isGoalCompleted = steps >= stepsGoal;
  const isStreakCompleted = steps >= (stepsGoal * 0.5);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–µ–Ω—å –≤ –ë–î
  const existingDay = await db.query(
    'SELECT steps, is_finalized FROM daily_steps WHERE user_id = $1 AND date = $2',
    [userId, date]
  );

  let xpGained = 0;
  let bonusXP = 0;

  if (existingDay.rows.length === 0) {
    // –î–µ–Ω—å –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î ‚Üí –Ω–æ–≤—ã–π –¥–µ–Ω—å
    console.log(`üìÖ –ù–æ–≤—ã–π –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –¥–µ–Ω—å: ${date}`);
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –≤–µ—Å—å XP
    await db.query(
      'UPDATE user_progress SET total_xp = total_xp + $1, total_steps = total_steps + $1 WHERE user_id = $2',
      [steps, userId]
    );
    xpGained = steps;

    // –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –µ—Å–ª–∏ —Ü–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    if (isGoalCompleted) {
      bonusXP = Math.floor(steps * bonusPercent);
      await db.query(
        'UPDATE user_progress SET total_xp = total_xp + $1 WHERE user_id = $2',
        [bonusXP, userId]
      );
      console.log(`‚úÖ –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω –∑–∞ ${date}: ${bonusXP} XP`);
    } else {
      console.log(`‚ÑπÔ∏è –î–µ–Ω—å ${date}: —Ü–µ–ª—å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–Ω—å —Å is_finalized = true
    await saveDailyStep(userId, {
      date,
      steps,
      goal_level,
      is_goal_completed: isGoalCompleted,
      is_streak_completed: isStreakCompleted,
      is_finalized: true
    });

  } else {
    const oldSteps = existingDay.rows[0].steps;
    const isFinalized = existingDay.rows[0].is_finalized;

    if (isFinalized) {
      // ‚úÖ –î–µ–Ω—å —É–∂–µ —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Üí –ª–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
      if (oldSteps !== steps) {
        console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–Ω—å ${date}: ${oldSteps} ‚Üí ${steps} —à–∞–≥–æ–≤`);
      } else {
        console.log(`‚ÑπÔ∏è –î–µ–Ω—å ${date} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ (–¥—É–±–ª–∏–∫–∞—Ç –∑–∞–ø—Ä–æ—Å–∞)`);
      }
      return { xpGained: 0, bonusXP: 0, goalReached: isGoalCompleted, stepsGoal };
    }

    // –î–µ–Ω—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Å is_finalized = false ‚Üí –±—ã–ª "—Å–µ–≥–æ–¥–Ω—è" –≤ –ø—Ä–æ—à–ª—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    console.log(`üìÖ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–Ω—è: ${date} (–±—ã–ª–æ ${oldSteps} —à–∞–≥–æ–≤, —Å—Ç–∞–ª–æ ${steps})`);
    
    // XP –£–ñ–ï –Ω–∞—á–∏—Å–ª–µ–Ω –∫–æ–≥–¥–∞ –¥–µ–Ω—å –±—ã–ª "—Å–µ–≥–æ–¥–Ω—è"
    xpGained = 0;

    // –ù–∞—á–∏—Å–ª—è–µ–º –¢–û–õ–¨–ö–û –±–æ–Ω—É—Å (–µ—Å–ª–∏ —Ü–µ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)
    if (isGoalCompleted) {
      bonusXP = Math.floor(steps * bonusPercent);
      await db.query(
        'UPDATE user_progress SET total_xp = total_xp + $1 WHERE user_id = $2',
        [bonusXP, userId]
      );
      console.log(`‚úÖ –ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω –∑–∞ ${date}: ${bonusXP} XP`);
    } else {
      console.log(`‚ÑπÔ∏è –î–µ–Ω—å ${date}: —Ü–µ–ª—å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –±–æ–Ω—É—Å –Ω–µ –Ω–∞—á–∏—Å–ª–µ–Ω`);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–Ω—å: is_finalized = true
    await updateDailyStep(userId, date, {
      steps,  // ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º steps –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏—è
      is_goal_completed: isGoalCompleted,
      is_streak_completed: isStreakCompleted,
      is_finalized: true
    });
  }

  return { xpGained, bonusXP, goalReached: isGoalCompleted, stepsGoal };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
 * - –ù–∞—á–∏—Å–ª—è–µ–º XP (–≤–µ—Å—å –∏–ª–∏ —Ä–∞–∑–Ω–∏—Ü—É)
 * - –ë–æ–Ω—É—Å –ù–ï –Ω–∞—á–∏—Å–ª—è–µ–º (–¥–µ–Ω—å –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω)
 * - is_finalized = false
 */
async function processTodayDay(userId, day) {
  const { date, steps, goal_level } = day;
  
  if (!GOAL_CONFIG[goal_level]) {
    console.warn(`–ù–µ–≤–µ—Ä–Ω—ã–π goal_level: ${goal_level} –¥–ª—è –¥–Ω—è ${date}`);
    return { xpGained: 0 };
  }

  const stepsGoal = GOAL_CONFIG[goal_level].steps;
  const isGoalCompleted = steps >= stepsGoal;
  const isStreakCompleted = steps >= (stepsGoal * 0.5);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–µ–Ω—å –≤ –ë–î
  const existingDay = await db.query(
    'SELECT steps FROM daily_steps WHERE user_id = $1 AND date = $2',
    [userId, date]
  );

  let xpGained = 0;

  if (existingDay.rows.length === 0) {
    // –ü–µ—Ä–≤—ã–π –∑–∞—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è ‚Üí –Ω–∞—á–∏—Å–ª—è–µ–º –≤–µ—Å—å XP
    console.log(`üìÖ –ü–µ—Ä–≤—ã–π –∑–∞—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: ${date}, —à–∞–≥–æ–≤: ${steps}`);
    
    await db.query(
      'UPDATE user_progress SET total_xp = total_xp + $1, total_steps = total_steps + $1 WHERE user_id = $2',
      [steps, userId]
    );
    xpGained = steps;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å is_finalized = false
    await saveDailyStep(userId, {
      date,
      steps,
      goal_level,
      is_goal_completed: isGoalCompleted,
      is_streak_completed: isStreakCompleted,
      is_finalized: false
    });

  } else {
    // –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è ‚Üí –Ω–∞—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
    const oldSteps = existingDay.rows[0].steps;
    const difference = steps - oldSteps;

    if (difference < 0) {
      // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å (–Ω–∞ —Å–ª—É—á–∞–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ HealthKit)
      console.warn(`‚ö†Ô∏è –®–∞–≥–∏ —É–º–µ–Ω—å—à–∏–ª–∏—Å—å –¥–ª—è ${date}: ${oldSteps} ‚Üí ${steps}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è XP
      await updateDailyStep(userId, date, {
        steps,
        is_goal_completed: isGoalCompleted,
        is_streak_completed: isStreakCompleted,
        is_finalized: false
      });
      
      return { xpGained: 0 };
    }

    console.log(`üìÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: ${date}, –±—ã–ª–æ ${oldSteps}, —Å—Ç–∞–ª–æ ${steps}, —Ä–∞–∑–Ω–∏—Ü–∞ ${difference}`);

    if (difference > 0) {
      await db.query(
        'UPDATE user_progress SET total_xp = total_xp + $1, total_steps = total_steps + $1 WHERE user_id = $2',
        [difference, userId]
      );
      xpGained = difference;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å (is_finalized –æ—Å—Ç–∞–µ—Ç—Å—è false)
    await updateDailyStep(userId, date, {
      steps,
      is_goal_completed: isGoalCompleted,
      is_streak_completed: isStreakCompleted,
      is_finalized: false
    });
  }

  return { xpGained };
}

async function updateGoalLevel(userId, goalLevel) {
  if (goalLevel < 1 || goalLevel > 4) {
    throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π goal_level: ${goalLevel}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1-4`);
  }

  await db.query(
    'UPDATE user_progress SET goal_level = $1 WHERE user_id = $2',
    [goalLevel, userId]
  );
}

async function getFinalProgress(userId) {
  const result = await db.query(
    'SELECT total_steps, total_xp, current_level FROM user_progress WHERE user_id = $1',
    [userId]
  );

  if (result.rows.length === 0) {
    const characterData = getCharacterData(1);
    return {
      total_steps: 0,
      current_xp: 0,
      current_level: 1,
      xp_to_next_level: 10000,
      character_image_url: characterData.image_url,
      character_animation_url: characterData.animation_url,
      current_streak: 0,
      longest_streak: 0
    };
  }

  const user = result.rows[0];
  const totalXP = parseInt(user.total_xp);
  
  // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
  let level = 1;
  let accumulated = 0;
  
  while (accumulated + (level * 10000) <= totalXP) {
    accumulated += level * 10000;
    level++;
  }

  const currentXP = totalXP - accumulated;
  const xpToNext = level * 10000;

  const characterData = getCharacterData(level);

  // –ü–æ–¥—Å—á–µ—Ç streak (—É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å)
  const currentStreak = await calculateCurrentStreak(userId);
  const longestStreak = await calculateLongestStreak(userId);

  return {
    total_steps: parseInt(user.total_steps),
    current_xp: currentXP,
    current_level: level,
    xp_to_next_level: xpToNext,
    character_image_url: characterData.image_url,
    character_animation_url: characterData.animation_url,
    current_streak: currentStreak,
    longest_streak: longestStreak
  };
}

async function getCurrentProgress(userId) {
  return await getFinalProgress(userId);
}

async function ensureUserExists(userId) {
  const userCheck = await db.query(
    'SELECT id FROM users WHERE id = $1',
    [userId]
  );

  if (userCheck.rows.length === 0) {
    await db.query('INSERT INTO users (id) VALUES ($1)', [userId]);
    await db.query(
      'INSERT INTO user_progress (user_id, goal_level) VALUES ($1, $2)',
      [userId, 3]
    );
    console.log('‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', userId);
  }
}

module.exports = { syncSteps };
